# LOOPS: LESSON
---------------

* Introduction to Loops
-----------------------
<1 min
A loop is a way to repeat code or a set of instructions until a specified condition is reached.

For example, have you ever been looking for somebody in a grocery store? You check each aisle until you find them. You naturally perform certain tasks with a repetition, or iteration, 
until a condition is met. In this case, when you finally catch that glimpse of a familiar person!

That generic term “iterate” means “to repeat.” You’ll find that, just like in real life, you’ll use loops in your code all the time! And just like this infinite GIF of blocks turning, a 
task may repeat seemingly infinitely, but you always have a way to control when it stops.

When we see that a process has to be repeated multiple times in a row, we write a loop. Loops allow us to create efficient code that automates processes to make scalable, manageable 
programs.

In this lesson, we will learn about three types of loops: while loops, do-while loops, and for loops!

* Instructions
--------------
Move on when you’re ready!

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Interacting with a Loop
-------------------------
4 min
Before we dive deep into the syntax of a loop, let’s do a demo!

We have a program that asks and checks for a pin. It uses a while loop, which will be the first type of loop we’ll learn about, to ask the user to type and enter a pin over and over again 
until the correct one is entered.

As a reminder, here’s how to compile and execute your code:

gcc enter_pin.c
./a.out

Note: You don’t need to understand the code yet, just how to interact with it!

* Instructions
--------------
Checkpoint 1 Passed
1.
Compile and execute in the terminal using

gcc enter_pin.c
./a.out

Note: The check will be red until you input the last PIN! This includes when you compile.

When the program asks you to Enter your PIN: , try the following:

Type 1111 and press enter.

Type 2021 and press enter.

Type 1234 and press enter.


Hint
Your terminal should look something like this after you are done with this task:

BANK OF CODECADEMY:
Enter your PIN: 1111
Enter your PIN: 2021
Enter your PIN: 1234
PIN accepted!
You now have access.

enter_pin.c
-----------
#include <stdio.h>

int main() {
  int pin = 0;
  int tries = 0;

  printf("BANK OF CODECADEMY:\n");
  printf("Enter your PIN: ");
  scanf("%d", &pin);

  tries++;
  /*I'm adding the next line for testing the behavior
  of the code*/
  //printf("%d", tries);
  while (pin != 1234 && tries < 3) {
    printf("Enter your PIN: ");
    scanf("%d", &pin);
    tries++;
    /*I'm adding the next line for testing the behavior
  of the code*/
    //printf("%d", tries);
  }

  if (pin == 1234) {
    printf("PIN accepted!\n");
    printf("You now have access.\n");
  }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

































