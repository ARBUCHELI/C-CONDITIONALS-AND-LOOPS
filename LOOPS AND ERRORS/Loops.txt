# LOOPS: LESSON
---------------

* Introduction to Loops
-----------------------
<1 min
A loop is a way to repeat code or a set of instructions until a specified condition is reached.

For example, have you ever been looking for somebody in a grocery store? You check each aisle until you find them. You naturally perform certain tasks with a repetition, or iteration, 
until a condition is met. In this case, when you finally catch that glimpse of a familiar person!

That generic term “iterate” means “to repeat.” You’ll find that, just like in real life, you’ll use loops in your code all the time! And just like this infinite GIF of blocks turning, a 
task may repeat seemingly infinitely, but you always have a way to control when it stops.

When we see that a process has to be repeated multiple times in a row, we write a loop. Loops allow us to create efficient code that automates processes to make scalable, manageable 
programs.

In this lesson, we will learn about three types of loops: while loops, do-while loops, and for loops!

* Instructions
--------------
Move on when you’re ready!

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Interacting with a Loop
-------------------------
4 min
Before we dive deep into the syntax of a loop, let’s do a demo!

We have a program that asks and checks for a pin. It uses a while loop, which will be the first type of loop we’ll learn about, to ask the user to type and enter a pin over and over again 
until the correct one is entered.

As a reminder, here’s how to compile and execute your code:

gcc enter_pin.c
./a.out

Note: You don’t need to understand the code yet, just how to interact with it!

* Instructions
--------------
Checkpoint 1 Passed
1.
Compile and execute in the terminal using

gcc enter_pin.c
./a.out

Note: The check will be red until you input the last PIN! This includes when you compile.

When the program asks you to Enter your PIN: , try the following:

Type 1111 and press enter.

Type 2021 and press enter.

Type 1234 and press enter.


Hint
Your terminal should look something like this after you are done with this task:

BANK OF CODECADEMY:
Enter your PIN: 1111
Enter your PIN: 2021
Enter your PIN: 1234
PIN accepted!
You now have access.

enter_pin.c
-----------
#include <stdio.h>

int main() {
  int pin = 0;
  int tries = 0;

  printf("BANK OF CODECADEMY:\n");
  printf("Enter your PIN: ");
  scanf("%d", &pin);

  tries++;
  /*I'm adding the next line for testing the behavior
  of the code*/
  //printf("%d", tries);
  while (pin != 1234 && tries < 3) {
    printf("Enter your PIN: ");
    scanf("%d", &pin);
    tries++;
    /*I'm adding the next line for testing the behavior
  of the code*/
    //printf("%d", tries);
  }

  if (pin == 1234) {
    printf("PIN accepted!\n");
    printf("You now have access.\n");
  }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Guess the Number
------------------
9 min
Now that you’ve interacted with a loop, let’s write one!

The while loop looks very similar to an if statement. And just like an if statement, it executes the code inside of it if the condition is true. The difference, however, is that the while 
loop will continue to execute the code inside of it, over and over again, as long as the condition is true.

Here’s a simple form of the while loop:

while (condition) {
  // Statement(s)
}

In other words, instead of executing if something is true, it executes while that thing is true.

while (guess != 8) {
  printf("Wrong guess, try again: ");
  scanf("%d", &guess);
}

In this example, the program will keep asking the user to input a new number while guess is not equal to 8. It will exit the while loop once the user types 8, allowing the condition to 
finally become false and let the program continue.

* Instructions
--------------
Checkpoint 1 Passed
1.
Note: The check box will be red until you input 8.

We have a program that asks the user to guess a number between 1 and 10. The answer we’re looking for is 8!

Run the program a couple of times and try guessing wrong numbers first. Then guess the correct number to get a feel for how the program repeats itself.

As a reminder, here’s how to compile and execute your code:

gcc guess.c
./a.out


Hint
Notice how you’re constantly running the program over and over again just to make each individual guess. This is why we’re going to utilize a loop here!

Checkpoint 2 Passed
2.
Now instead of just asking the user once, let’s add a while loop to handle the repetition of guesses. To limit the loop, we’ll allow up to 50 tries:

while (guess != 8 && tries < 50) {
  printf("Wrong guess, try again: ");
  scanf("%d", &guess);
  tries++;
}

After adding the loop, compile and execute your code using:

gcc guess.c
./a.out


Hint
In this while loop, while guess does not equal 8 and the number of tries is less than 50, we are asking the user to try again. With each new try, we add 1 to tries using the ++ 
operator.

Remember, the && logical operator combines two conditions into one. This means they both need to be true for the overall condition to be true. We can use this knowledge and the example 
above to write the while loop.

guess.c
-------
#include <stdio.h>

int main() {

  int guess;
  int tries = 0;

  printf("I’m thinking of a number in the range 1-10.\n");
  printf("Try to guess it: ");
  scanf("%d", &guess);

  // Write a while loop here:
  while (guess != 8 && tries < 50) {
    printf("Wrong guess, try again: ");
    scanf("%d", &guess);
    tries++;
  }



  if (guess == 8) {
    printf("You got it!\n");
  }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* while Loop
------------
11 min
For the last loop we held your hand, so let’s try one on your own!

As an example of iteration, we have the first program ever to run on a stored-program computer (the EDSAC). It was written and run in the computer laboratory at Cambridge University, 
England, on May 6, 1949, to calculate and print a simple list of squares like the following:

0   0
1   1
2   4
3   9
4   16
5   25
6   36
7   49
8   64
9   81

On the left, there are numbers from 0 to 9. On the right are their squares. For example, for the number 9: 9 * 9 = 81.

Note: An algorithm like this is one of the easiest tells for needing a loop. But as you develop your programming skills, you’ll pick up more and more subtle hints and uses for where loops 
can be incorporated into your code!

* Instructions
--------------
Checkpoint 1 Passed
1.
Write a while loop that prints out a number, followed by a tab \t, then the square of that number, followed by a new line \n like so:

printf("%d\t%d\n", num, num * num);

Have the while loop calculate this from 0 to 9.

Note: If you notice the Run button spinning continuously or a “Lost connection to Codecademy” message in this exercise, you may have an infinite loop! If the stop condition for our loop 
is never met, we will create a loop that never exits which prevents the program from ever completing. In this exercise, you can simply refresh the page to stop the infinite loop — then 
fix the code for your loop. However, we’ll talk more about infinite loops later, and even how to use them effectively!


Hint
You can write the while loop in a couple of different ways. One way could involve the condition i < 10, another way could involve i <= 9. You can also choose not to use the square 
variable entirely. In this exercise, the output is what matters.

And remember, you can output multiple things in a single print statement.

Checkpoint 2 Passed
2.
Now change your while loop to go backward from 9 and stop at 0. Your new output should look like this:

9   81
8   64
7   49
6   36
5   25
4   16
3   9
2   4
1   1
0   0


Hint
Make sure you’re decrementing here with -- instead of incrementing with ++. And make sure you’re also starting your i at 9 instead of 0!

square.c
--------
#include <stdio.h>

int main() {

  int i = 9;
  int square = 0;

  // Write a while loop here:
  while ( i >= 0)
  {
    square = i * i;
    printf("%d\t%d\n", i, square);
    i--;
  }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* do-while Loop
---------------
5 min
Now that we’ve written a while loop, let’s write an alternate form of it.

We’ll look at its syntax first then explain what’s happening and why:

do {
  // Statement(s)
} while (condition);

This is odd, the condition came after the statements. Does this mean the condition isn’t checked until after the statements get executed?

That is exactly what happens!

This is what’s known as a do-while loop. Simply put, it does something first, and then checks the condition afterward and loops in this manner until the condition is no longer true.

The do-while loop is most often used when a program wants to do something at least once before checking the condition.

* Instructions
--------------
Checkpoint 1 Passed
1.
Convert the while loop into a do-while loop.


Hint
The syntax of a do-while loop is:

do {
  // Statement(s)
} while (condition);

Don’t forget the ; at the end!

Checkpoint 2 Passed
2.
You may have noticed there wasn’t a difference between the outputs of this particular while loop and do-while loop.

To see exactly how they run differently, change int i = 0 to int i = 11.

Run it again. What do you think will happen?


Hint
Remember, a do-while loop always executes the statements first before checking the condition! So even though 11 makes the condition immediately false, this version of the loop doesn’t 
actually know that until after its first iteration.

This is the beauty of the do-while loop, however you won’t see it as often as the while loop!

do.c
----
#include <stdio.h>

int main() {

  int i = 11;

  do {
    printf("%d\n", i);
    i++;
  }
  while (i < 10);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* for Loop
----------
13 min
The while loop examples we’ve looked at so far iterate over a sequence of numbers. This is so common that C, like most other programming languages, has a special syntax for it.

When we know exactly how many times we want to iterate (or count), we can use a for loop instead of a while loop.

For example, this is a for loop:

for (int i = 0; i < 10; i++) {
  printf("%d\n", i);
}

Let’s take a closer look at the first line:

for (int i = 0; i < 10; i++)

There are three parts to this separated by two ;:

	. The initialization of a counter: int i = 0

	. The condition: i < 10

	. The change in the counter (in this case an increment): i++

In the first part, we create a variable i that starts from 0 and acts as our counter. In the second part, as long as our counter i is less than 10, the statements within the loop will 
repeatedly run. In the third and final part, after each iteration of the for loop, we add 1 to i using the ++ operator.

Or in other words, we start with some initialized variable, then while some condition is true, we do something, then we incrementally change the control variable. Does this sound familiar?

It’s just like a while loop! In fact, the above for loop does the exact same thing as the while loop we just worked with in the previous exercise!

The while loop from exercise 5:

int i = 0;

while (i < 10) {
  printf("%d\n", i);
  i++;
}

Note: This distinction is important because it allows us to switch between while loops and for loops to best fit the current program’s needs. If we don’t quite know when a loop may end, 
we use a while loop. If we do know exactly when a loop should end, we use a for loop.

* Instructions
--------------
Checkpoint 1 Passed
1.
First, let’s start with what you already know.

Write a while loop that starts at 99, stops at 0, and prints the following:

	. “[i] bottles of pop on the wall.”

	. “Take one down and pass it around.”

	. “[i - 1] bottles of pop on the wall.”

It should then decrement i by 1.

Note: If you run into an infinite loop, refresh to page to stop it!


Hint
Your printf() statements should look like this:

printf("%d bottles of pop on the wall.\n", i);
printf("Take one down and pass it around.\n");
printf("%d bottles of pop on the wall.\n", i - 1);

Checkpoint 2 Passed
2.
Convert your while loop into a for loop.


Hint
Remember, a while loop already has all the necessary components to make a for loop work.

99bottles.c
-----------
#include <stdio.h>

int main() {

  //int i = 99;

  // Write your loop here
  /*while (i > 0)
  {
    printf("%d bottles of pop on the wall.\n", i);
    printf("Take one down and pass it around.\n");
    printf("%d bottles of pop on the wall.\n", i-1);
    printf("\n");
    i--;
  }*/

  for (int i = 99; i > 0; i--)
  {
    printf("%d bottles of pop on the wall.\n", i);
    printf("Take one down and pass it around.\n");
    printf("%d bottles of pop on the wall.\n", i-1);
    printf("\n");
  }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Breaking Out
--------------
14 min
When working with loops, it’s important to know a few special keywords that can affect how a loop runs. Let’s look at a quick example to introduce the first special keyword!

Do you remember the while loop from exercise 3?

while (guess != 8 && tries < 50) {
  printf("Wrong guess, try again: ");
  scanf("%d", &guess);
  tries++;
}

The loop runs until 8 is guessed or 50 attempts have been made to guess the secret number. This means the loop will stop running as soon as one of those conditions is met. There is 
another way to write this, but using a special keyword. See if you can spot it!

while (tries < 50) {
  scanf("%d", &guess);

  if (guess == 8) {
    break;
  }

  printf("Wrong guess, try again: ");
  tries++;
}

The keyword break allows us to, quite literally, “break” out of a loop and stop it from running any more times.

It can often simply be avoided with careful planning of the conditional controlling a loop. It’s generally advised to be careful with breaking out of loops because it can result in 
unexpected processing when a programmer has a mental plan centered around a loop finishing all its iterations.

However, when used effectively, a break can increase the efficiency of a program and help minimize its memory uses through unnecessary variables.

Note: break is most often used when a program wants to run a loop infinitely in a controlled manner. For example, a program that runs until the user types “quit.” In that instance, the 
program may run forever, but will only break out of its running loop when the user tells it.

* Instructions
--------------
Checkpoint 1 Passed
1.
In our program, the while loop will run a set amount of times or until a non-positive number is entered (this includes 0 and negative numbers). Without changing the condition of the while 
loop, try to get it to stop when a non-positive number is entered using the break keyword.


Hint
An if statement can be used to break out of the loop if number1 is a non-positive number.

Checkpoint 2 Passed
2.
You may have noticed the break keyword isn’t necessary here to stop the loop from running.

Create a second while loop below the first one and use the condition number2 > 0 && numbers_entered2 < 10, then write the loop as normal without any break. Don’t forget to initialize the 
new variables at the top of main.

Run the program again with the second loop, you’ll see both loops act the same exact way and stop when a negative number is entered.


Hint
Your while loop should have two conditions inside its conditional that both should be true for it to continue running.

You can compile and run your code using:

gcc infinity.c 
./a.out 

infinity.c
----------
#include <stdio.h>

int main() {

  int number1 = 1;
  int numbers_entered1 = 0;
  int number2 = 1;
  int numbers_entered2 = 0;

  while (numbers_entered1 < 10) {

    printf("Loop 1 - Please enter a number: ");
    scanf("%d", &number1);

    // Figure out how to break out here!
    if (number1 <= 0)
    {
      break;
    }
    numbers_entered1++;
  }

  while (number2 > 0 && numbers_entered2 < 10) {

    printf("Loop 2 - Please enter a number: ");
    scanf("%d", &number2);
    numbers_entered2++;
  }

  


  printf("Good job! You’ve broken out!\n");
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------




































































































































































































































