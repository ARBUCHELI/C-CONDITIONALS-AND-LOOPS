# CONDITIONALS - LESSON
-----------------------

* Introduction
--------------
Every program we’ve seen so far has only had one possible path of execution — they all execute line by line, from top to bottom. And every time you run one of those programs, it gives you 
the same exact result. But it’s the twenty-first century, and we like options!

In this lesson, we will introduce logic into our code and explore how programs make decisions by evaluating conditions!

We’ll be covering the following concepts:

	. if, else if, and else statements

	. switch statements

	. Relational and Logical operators

	. Ternary operators

So… if you’ve already learned these concepts in another language, go to the next lesson — else, prepare yourself and let’s get started!

* Instructions
--------------
Move on when you’re ready!

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Coin Flip Demo
----------------
1 min
Before we dive deep into the syntax of the if statement, let’s do a demo!

title

Here, we have a coinflip.c program that simulates a coin toss:

	. 50% of the time, it’s Heads.

	. 50% of the time, it’s Tails.

* Instructions
--------------
Checkpoint 1 Passed
1.
Run the program twice to see an if else statement in action!

How many times did it go Heads?


Hint
The code at the top of main() shows how you can create a random number during each execution: coin will be either 0 or 1.

The part that we are going to focus on in this lesson is this:

if (coin == 0) {
  printf("Heads\n");
} else {
  printf("Tails\n");
}

coinflip.c
----------
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int main() {
  // Create a number that’s 0 or 1
  srand (time(NULL));
  int coin = rand() % 2;

  // If number is 0: Heads
  // If it is not 0: Tails
  if (coin == 0) {
    printf("Heads\n");
  } else {
    printf("Tails\n");
  }
}

code Explanation
----------------
The selected code generates a random number that is either 0 or 1, simulating a coin flip.

srand(time(NULL)) seeds the random number generator with the current time.
int coin = rand() % 2 generates a random number between 0 and 1 and stores it in coin.
The if statement checks if coin is equal to 0. If it is, it prints “Heads”. Otherwise, it prints “Tails”.
This code provides a random outcome of either “Heads” or “Tails” when executed.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* if Statement
--------------
5 min
An if statement is used to test an expression for truth and execute some code based on it. Here’s a simple form of the if statement:

if (condition) {
  // Statement(s)
}

If the condition is true, then the statements within the if block are executed. These statements are any lines of code that would otherwise be normally executed by the program. When the 
condition is false, the inside statements are skipped and the program continues on.

if (flip == 1) {
  printf("Heads\n");
}

The if keyword is followed by a set of parentheses (). Inside these parentheses, a condition is provided that evaluates to true or false:

	. If the condition evaluates to true, the code inside the curly braces {} executes.

	. If the condition evaluates to false, the code doesn’t execute.

So in the code above, if flip is equal to 1, the program outputs “Heads”; if it does not, then nothing happens and the program continues.

* Instructions
--------------
Checkpoint 1 Passed
1.
Write an if statement that checks if grade1 > 60 is true and prints “Pass\n” if it is.


Hint
The skeleton of the if statement is:

if (condition) {
  // Statement(s)
}

Checkpoint 2 Passed
2.
Write another if statement that checks if grade2 < 60 is true and prints “Fail” if it is.

grade.c
-------
#include <stdio.h>

int main() {

  int grade1 = 90;
  int grade2 = 59;
  if (grade1 > 60) {
    printf("Pass\n");
  }
  if (grade2 < 60) {
    printf("Fail\n");
  }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Working with Operators
------------------------
5 min
We’ve already seen relational operators at work. Conditionals incorporate them in all their forms.

For example, we can do something like:

if (grade >= 60) {
  // Do something
}

In much the same fashion, we could’ve used a <=, or !=, or even ==. These relational operators naturally result in true or false expressions, which make them perfect for conditionals!

However, sometimes we need to write multiple conditions in one conditional statement. In a past lesson, we learned about logical operators. We can use these operators here as well!

Let’s recap the logical operators:

	. && AND

	. || OR

	. ! NOT

When placed in a conditional statement, logical operators work together to produce one true or false output across multiple conditions.

For example:

if (a > 0 && b > 0) {
  printf("Positive\n");
}

The above conditional checks if both conditions are true, and if they both are, the if statement passes. If either a or b was a negative number, the if statement would be false.

* Instructions
--------------
Checkpoint 1 Passed
1.
Change the logical operator in the conditional statement from a > 0 && b > 0 to a > 0 || b > 0.

What do you think will happen?


Hint
Even though one of the numbers was negative, making one condition false, the if statement will still pass with true!

This is because the logical operator || only requires one of its conditions to pass in order to be true.

Checkpoint 2 Passed
2.
Now add another if statement that checks if both a > 0 and !(b > 0) are true and prints “Positive too” if they are.

What do you think will happen?


Hint
Before, this && logical operator made the conditional false because b was negative. Now, however, running this code gets “Positive too” to print! So even though b > 0 is false, we negate 
that with !, making it return true instead.

positive.c
----------
#include <stdio.h>

int main() {

  int a = 10;
  int b = -5;

  if (a > 0 || b > 0) {
    printf("Positive\n");
  }
  if (a > 0 && !(b > 0)) {
    printf("Positive too\n");
  }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* else Clause
-------------
5 min
We can also add an else clause to an if statement to provide code that will only be executed if the initial if condition is false. Here’s a form of an if statement that includes an else 
clause:

if (condition) {
  // Statement1 — do something
} else {
  // Statement2 — do something else
}

	. If condition is true, statement1 is executed. Then the program skips statement2 and executes any code statements following the if / else clause.

	. If condition is false, statement1 is skipped and statement2 is executed. After statement2 completes, the program executes any code statements following the if / else clause.

if (coin == 1) {
  printf("Heads\n");
} else {
  printf("Tails\n");
}

In the code above, if coin is equal to 1, the program outputs “Heads”; if it does not, then it outputs “Tails.”

Note: It’s either or — only one of them will execute!

* Instructions
--------------
Checkpoint 1 Passed
1.
Add an else statement that prints “Fail\n”.


Hint
The skeleton of an else statement looks like:

if (condition) {
  // Statement1 — do something
} else {
  // Statement2 — do something else
}

Checkpoint 2 Passed
2.
Add a second if / else statement with the condition grade2 > 60 that prints “Pass\n” if true and “Fail\n” if otherwise. Run the program again to see how the else clause gets skipped when 
the condition isn’t false!

grade.c
-------
#include <stdio.h>

int main() {

  int grade1 = 59;
  int grade2 = 90;

  if (grade1 > 60) {
    printf("Pass\n");
  } else {
    printf("Fail\n");
  }
  if (grade2 > 60) {
    printf("Pass\n");
  } else {
    printf("Fail\n");
  }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* else if
---------
6 min
So what happens if you want more than two possible outcomes?

This is where else if comes in!

if (condition) {
  // Some code
} else if (condition) {
  // Some code
} else {
  // Some code
}

The else if statement always comes after the if statement and before the else statement (if there is one). Like the else statement, else if statements are also always optional!

The else if then takes a condition, and you can have more than one of them. Here’s an example with three of them:

if (grade == 9) {
  printf("Freshman\n");
} else if (grade == 10) {
  printf("Sophomore\n");
} else if (grade == 11) {
  printf("Junior\n");
} else if (grade == 12) {
  printf("Senior\n");
} else {
  printf("Super Senior\n");
}

* Instructions
--------------
Checkpoint 1 Passed
1.
In chemistry, pH is a scale used to specify the acidity or basicity of an aqueous solution.

Write an if statement that checks if ph is greater than 7, then print “Basic” if it is.

2.
Change double ph = 7.9 to double ph = 4.6.

Now attach an else if statement to that if statement and have it check if ph is less than 7, then print “Acidic” if it does.


Hint
The skeleton of an else if is:

if (condition) {
  // Some code
} else if (condition) {
  // Some code
}

Checkpoint 3 Passed
3.
Change double ph = 4.6 to double ph = 7.

Add an else statement that prints “Neutral” if all conditions fail to pass.


Hint
The skeleton of an if / else if / else is:

if (condition) {
  // Some code
} else if (condition) {
  // Some code
} else {
  // Some code
}

ph.c
----
#include <stdio.h>
 
int main() {
 
  double ph = 7;

  // Start the if, else if, else here:
  if (ph > 7) {
    printf("Basic\n");
  } else if (ph < 7) {
    printf("Acidic\n");
  } else {
    printf("Neutral\n");
  }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------
























































































































































